3/26 - 원카드 프로젝트 완성
1. 원카드게임을 한다고 생각하고 그에 맞추어 코드 작성
2. scanner를 통해 도스창으로 게임 진행
3. 나름대로 class별 method를 어떻게 생성해야될지 생각하면서 작성

잘한점
1. 끝까지 코드를 완성시킴
2. 규칙 순서대로 차근차근 코드를 작성

개선할 점
1. 나름의 규칙을 가지고 코드를 작성했으나 아직까지도 코드를 한꺼번에 짜는 경향이 있다
-> 현재 이를 생가하지 못하고 한번에 1,2,3,4 카드제출부터 특수카드 기능수행까지 한번에 시도 -TDD 수행할 생각조차 못함
1. 개선방향
   1) j,q,k 와 같이 특수카드는 제외하고 카드를 제출하는 코드를 작성 - TDD 수행
   2) j,q,k 각각의 특수기능을 따로 method를 만들어 TDD 수행 후 toy project에 합하는 과정
   3) 다른 과정도 이와 같은 방향으로 유도

2. method를 어떻게 더 맞는 class에 분류를 해야할지 갈피를 못잡음
-> 코드가 서로 독립적이여야 나중에 유지보수가 쉬운데 얽혀있는 느낌을 받는 중
2. 개선방향
   1) 코드를 독립적으로 분리 필요 - 1.개선방향과 같이 method별로 독립적으로 코드 작성 및 TDD 수행 후 합하는 과정을 거치면 개선할 가능성이 보일 거 같다.
   2) 각 class의 iv, method, 생성자를 그림으로 그려서 파악해보기

3. Q와 같이 player 순서가 역순으로 돌리는 것을 Array로 작성
-> 5명 이상의 Player가 들어오면 규칙이 무너진다.
3. 개선방향
    1) LinkedList의 구현을 통해서 해결

4. 추가 기능 넣기
-> 코드를 한번에 작성하다보니 방어카드, 공격카드를 공격카드로 턴 넘기기와 같은 작업을 손대지 못하였다.
4. 개선방향
    1) 1~3 과정을 마친 후 method 넣는 과정 수행

5. 코드 수정을 하면서 항상 어떤식으로 코드를 시작할 때부터 설계해야하는지 기록하기


3/27 - 원카드 player 순서 - linkedList 구현 및 TDD
1. 해결방안
   1) 개별 메서드라 생각하고 구현
   2) TDD 수행하여 오류 검증
   3) hardCoding 에 적용은 하지 않음 -> 개선 방향 1,2번을 고려해서 다시 oneCardcode 작성 후 주입해보기

1. 구현방향
   1) 먼저 일반적인 LinkedList 구현
   2) LinkedList 구현 후 마지막 Node에 null이 아닌 첫 Node와 연결시키는 circleLinkedList 구현
   3) Q는 역순으로도 이동이 가능해야하므로 doubleLinkedList 구현
   4) doubleLinkedList 또한 처음과 끝의 Node를 연결해야하므로 circleLinkedList 구현
